using System;
using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Control code for the the player's game object.
/// Very approximate simulation of flight dynamics.
/// </summary>
public class PlayerControl : MonoBehaviour
{
    /// <summary>
    /// Coefficient of draft for head winds
    /// </summary>
    [Header("Aerodynamic coefficients")]
    public float ForwardDragCoefficient = 0.01f;
    /// <summary>
    /// Drag coefficient for winds blowing up/down across wings
    /// </summary>
    public float VerticalDragCoefficient = 0.5f;
    /// <summary>
    /// Lift generated by the wings
    /// </summary>
    public float LiftCoefficient = 0.01f;

    /// <summary>
    /// How far the plane can tilt around the X axis
    /// </summary>
    [Header("Movement Speeds")]
    public float PitchRange = 45f;
    /// <summary>
    /// How far the plane can rotate about the Z axis
    /// </summary>
    public float RollRange = 45f;
    /// <summary>
    /// How fast the plane yaws for a given degree of roll.
    /// </summary>
    public float RotationalSpeed = 5f;
    /// <summary>
    /// Thrust generated when the throttle is pulled back all the way.
    /// </summary>
    public float MaximumThrust = 20f;

    /// <summary>
    /// Text element for displaying status information
    /// </summary>
    [Header("HUD")]
    public Text StatusDisplay;
    /// <summary>
    /// Text element for displaying game-over text
    /// </summary>
    public Text GameOverText;

    /// <summary>
    /// Cached copy of the player's RigidBody component
    /// </summary>
    private Rigidbody playerRB;


    /// <summary>
    /// Magic layer mask code for the updraft(s)
    /// </summary>
    const int UpdraftLayerMask = 1 << 8;

    /// <summary>
    /// Define outlier range for the controller input
    /// </summary>
    const float DeadZonSize = 0.2f;

    #region Internal flight state
    /// <summary>
    /// Current yaw (rotation about the Y axis)
    /// </summary>
    private float yaw;
    /// <summary>
    /// Current pitch (rotation about the X axis)
    /// </summary>
    private float pitch;
    /// <summary>
    /// Current roll (rotation about the Z axis)
    /// </summary>
    private float roll;
    /// <summary>
    /// Current thrust (forward force provided by engines
    /// </summary>
    private float thrust;

    /// <summary>
    /// Gameobject updrafts
    /// </summary>
    GameObject updraft;


    /// <summary>
    ///  Updrafts position
    /// </summary>
    Vector3 updraft_pos;


    /// <summary>
    ///  Updrafts radius
    /// </summary>
    float updraft_radius;


    float speed;

    #endregion

    /// <summary>
    /// Initialize component
    /// </summary>
    internal void Start()
    {
        playerRB = GetComponent<Rigidbody>();
        playerRB.velocity = transform.forward * 3;
        updraft = GameObject.Find("Updraft");
        updraft_pos = updraft.transform.position;
        updraft_radius = updraft.GetComponent<CapsuleCollider>().radius;
    }

    /// <summary>
    /// Handling plane:
    /// 1. Steering
    /// 2. Thrust
    /// 3. Aerodynamics (Drag, Lift)
    /// </summary>
    void FixedUpdate()
    {
        //1. Yaw, Roll, Pitch
        //An axis has a value between –1 and 1. The neutral position is 0. This is the case for joystick input and keyboard input.
        //Ref:https://docs.unity3d.com/Manual/ConventionalGameInput.html
        pitch = Mathf.Lerp(pitch, DeadZone(Input.GetAxis("Vertical")) * PitchRange, 0.01f);
        roll = Mathf.Lerp(roll, DeadZone(Input.GetAxis("Horizontal")) * RollRange, 0.01f);

        //eulerAngles
        Vector3 current = transform.localEulerAngles;
        yaw = yaw - roll * RotationalSpeed * Time.fixedDeltaTime;
        Quaternion current_rotate = transform.localRotation;

        //Ref:http://answers.unity3d.com/questions/828130/rotate-rigidbody-using-moverotation-around-the-glo.html
        Quaternion rotation = Quaternion.Euler(new Vector3(pitch, yaw, roll));

        //Ref:https://unity3d.com/cn/learn/tutorials/topics/scripting/quaternions
        playerRB.MoveRotation(rotation);

        //2. Thrust
        thrust = Get_thrust(DeadZone(Input.GetAxis("Thrust")));
        playerRB.AddRelativeForce(Vector3.forward * thrust);

        //3. Lift
        Vector3 X_local = transform.right;
        Vector3 Y_local = transform.up;
        Vector3 Z_local = transform.forward;

        Vector3 V_ref = getAirVelocity(playerRB.velocity);

        float V_f = Vector3.Dot(V_ref, Z_local);

        Vector3 f_lift = LiftCoefficient * V_f * V_f * Y_local;
        playerRB.AddForce(f_lift);

        //4. Drag
        //Forward drag
        Vector3 forward_drag = Mathf.Sign(V_f) * ForwardDragCoefficient * V_f * V_f * Z_local;
        playerRB.AddForce(forward_drag);

        //vertical/up drag
        float v_up = Vector3.Dot(V_ref, Y_local);
        Vector3 up_drag = Mathf.Sign(v_up) * VerticalDragCoefficient * v_up * v_up * Y_local;
        playerRB.AddForce(up_drag);

        speed = playerRB.velocity.magnitude;
    }


    /// <summary>
    /// Filter out noise form the controller
    /// </summary>
    /// <param name="axis"></param>
    /// <returns></returns>
    private float DeadZone(float axis)
    {
        if (Math.Abs(axis) < DeadZonSize)
        {
            return 0;
        }
        return axis;
    }

    /// <summary>
    /// Calculate the air velocity:
    /// If the plane is in the updraft, it is equal to the Updraft object’s WindVelocity minus the player’s velocity.
    /// Else, it is equal to - player’s velocity.
    /// </summary>
    /// <param name="player_velocity"></param>
    /// <returns></returns>
    private Vector3 getAirVelocity(Vector3 player_velocity)
    {
        Collider[] hitColliders = Physics.OverlapSphere(playerRB.position, playerRB.GetComponent<BoxCollider>().size.x, LayerMask.GetMask("Updrafts"));

        if (hitColliders.Length > 0)
        {
            var updraft_script = updraft.GetComponent<Updraft>();
            Vector3 org_air = updraft_script.WindVelocity;
            return org_air - player_velocity;
        }
        else
        {
            return -player_velocity;
        }

    }

    /// <summary>
    /// Calculate the force in forward direction proportional to the value of the “Thrust” axis if the value is postive,
    /// otherwise, the force is zero
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    private float Get_thrust(float input)
    {
        if (input > 0)
        {
            return input * MaximumThrust;
        }
        else { return 0f; }
    }

    /// <summary>
    /// Show game-over display
    /// </summary>
    /// <param name="safe">True if we won, false if we crashed</param>
    private void OnGameOver(bool safe)
    {
        playerRB.velocity = Vector3.zero;
        playerRB.useGravity = false;
        playerRB.constraints = RigidbodyConstraints.FreezeAll;
        if (safe)
        {
            GameOverText.text = "You Win!";
        }
        else
        {
            GameOverText.text = "OOPS";
        }
    }

    bool is_collided = false;
    /// <summary>
    /// Handle landing, if the speed is less than MaxLandingSpeed,
    /// it is successful, otherwise it fails.
    /// </summary>
    /// <param name="collision"></param>
    void OnCollisionEnter(Collision collision)
    {
        bool result = false;
        if (collision.gameObject.name == "LandingPlatform" && (!is_collided))
        {
            //Ref:https://forum.unity3d.com/threads/c-get-variable-from-another-script.204336/         
            var landplatform = collision.gameObject.GetComponent<LandingPlatform>();

            if (speed <= landplatform.MaxLandingSpeed)
            {
                result = true;
            }
            is_collided = true;
        }
        OnGameOver(result);
    }

    /// <summary>
    /// Display status information
    /// </summary>
    internal void OnGUI()
    {
        StatusDisplay.text = string.Format("Speed: {0:00.00}    altitude: {1:00.00}    Thrust {2:0.0}",
            playerRB.velocity.magnitude,
            transform.position.y,
            thrust);
    }
}
